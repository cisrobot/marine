
bt_navigator:
  ros__parameters:
    use_sim_time: false
    global_frame: odom
    robot_base_frame: base_link
    # odom_topic: /scout_mini_base_controller/odom
    odom_topic: /scout_mini_base_controller/odom
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    #default_nav_through_poses_bt_xml: "/home/marin/marine/src/nav2_custom/xml/custom.xml"
    plugin_lib_names: 
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: false

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: false


controller_server:
  ros__parameters:
    #controller server parameters (see Controller Server for more info)
    use_sim_time: false
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    progress_checker_plugins: ["progress_checker"] # progress_checker_plugin: "progress_checker" For Humble and older
    goal_checker_plugins: ["goal_checker"]
    controller_plugins: ["FollowPath"]
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
      stateful: True
    # DWB controller parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.7 #linear.x
      max_vel_y: 0.0
      max_vel_theta: 0.4 #angular.z
      min_speed_xy: 0.0
      max_speed_xy: 0.7 #same with max_vel_x
      min_speed_theta: 0.0
      acc_lim_x: 2.5
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 1
      vtheta_samples: 20
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.2
      short_circuit_trajectory_evaluation: True
      limit_vel_cmd_in_traj: False
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      GoalAlign.scale: 24.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0
controller_server_rclcpp_node:
   ros__parameters:
    use_sim_time: false
   #rpp 
#     use_sim_time: False
#     controller_frequency: 15.0
#     min_x_velocity_threshold: 0.001
#     min_y_velocity_threshold: 0.5
#     min_theta_velocity_threshold: 0.001
#     progress_checker_plugins: ["progress_checker"] # 진행확인용 progress_checker_plugin: "progress_checker" For Humble and older
#     goal_checker_plugins: ["goal_checker"] # 도착 여부 확인
#     controller_plugins: ["FollowPath"]
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 10.0
#     goal_checker:
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.25
#       yaw_goal_tolerance: 0.25
#       stateful: True
#     FollowPath:
#       plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
#       desired_linear_vel: 0.8
#       lookahead_dist: 1.0 #현재 lookahead 해당값으로 고정
#       min_lookahead_dist: 0.6
#       max_lookahead_dist: 1.4
#       lookahead_time: 1.5
#       rotate_to_heading_angular_vel: 0.7
#       transform_tolerance: 0.2
#       use_velocity_scaled_lookahead_dist: false
#       min_approach_linear_velocity: 0.05
#       approach_velocity_scaling_dist: 1.0
#       use_collision_detection: true
#       max_allowed_time_to_collision_up_to_carrot: 1.5
#       use_regulated_linear_velocity_scaling: true
#       use_fixed_curvature_lookahead: false
#       curvature_lookahead_dist: 1.0
#       use_cost_regulated_linear_velocity_scaling: false
#       regulated_linear_scaling_min_radius: 0.6
#       regulated_linear_scaling_min_speed: 0.3
#       use_rotate_to_heading: true
#       allow_reversing: false
#       rotate_to_heading_min_angle: 0.785
#       max_angular_accel: 3.2
#       max_robot_pose_search_dist: 2.5
#       stateful: true
# controller_server_rclcpp_node:
#    ros__parameters:
#     use_sim_time: false



local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0 #5.0
      publish_frequency: 5.0 #2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: false
      rolling_window: true
      width: 10
      height: 10
      resolution: 0.05
      robot_radius: 0.4
      plugins: ["obstacle_layer", "sidewalk_layer", "inflation_layer"]

      # plugins: ["obstacle_layer", "inflation_layer"]
      # plugins: ["inflation_layer", "sidewalk_layer"]     
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.2 #0.2
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: true
        observation_sources: velodyne
        velodyne:
          topic: "/velodyne_points"
          max_obstacle_height: 1.9
          min_obstacle_height: 0.05
          clearing: true
          marking: true
          obstacle_range: 5.0
          raytrace_range: 6.0
          data_type: "PointCloud2"
      sidewalk_layer:
        plugin: "nav2_custom::SidewalkLayer"
        topic_name: "/sidewalk_costmap"
        enabled: true
      always_send_full_costmap: true
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.5
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: true
      robot_radius: 0.4
      resolution: 0.05
      width: 500
      height: 500
      origin_x: -250.0  # X축 시작 좌표
      origin_y: -250.0  # Y축 시작 좌표
      track_unknown_space: true
      plugins: ["obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: true
        observation_sources: velodyne
        velodyne:
          topic: /velodyne_points
          max_obstacle_height: 1.9
          min_obstacle_height: 0.05
          clearing: true
          marking: true
          data_type: "PointCloud2"
          raytrace_max_range: 10.5
          raytrace_min_range: 0.0
          obstacle_max_range: 10.5
          obstacle_min_range: 0.0
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.2
      always_send_full_costmap: true
  global_costmap_client:
    ros__parameters:
      use_sim_time: True
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

map_server:
  ros__parameters:
    use_sim_time: false
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: false
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: true
    
#planner_server:
  #ros__parameters:
   # expected_planner_frequency: 20.0  # 플래너가 실행되는 주기 (Hz), 20Hz → 0.05초마다 경로 다시 계산
    #use_sim_time: false  # 시뮬레이션 시간 사용 여부 (True면 /clock 토픽을 따라감)

    #planner_plugins: ["GridBased"]  # 사용할 글로벌 플래너 지정 ("GridBased"라는 이름을 사용)

    #GridBased:  # GridBased 플래너의 설정 (NavFn 사용)
     # plugin: "nav2_navfn_planner/NavfnPlanner"  # Nav2의 NavFn 플래너 사용 (기본 A* 기반 경로 계획)
     # tolerance: 0.5  # 목표 지점과 최대 0.5m 차이가 나도 도착한 것으로 인정
      #use_astar: false  # A* 알고리즘 활성화 (기본적으로 Dijkstra 사용)
      #allow_unknown: true  # 알려지지 않은 지도 영역도 탐색 가능 (True면 미탐색 지역도 지나갈 수 있음)


planner_server:
  ros__parameters:
    planner_plugins: ['GridBased']
    use_sim_time: False
    GridBased:
      plugin: 'nav2_navfn_planner/NavfnPlanner' # In Iron and older versions, "/" was used instead of "::"
      use_astar: False
      allow_unknown: True
      tolerance: 1.0
    expected_planner_frequency: 20.0
    use_sim_time: False

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False #True

# planner_server:
#   ros__parameters:
#     goal_tolerance: 0.5
#     planner_plugins: ["GridBased"]
#     use_sim_time: false

#     GridBased:
#       plugin: "nav2_smac_planner/SmacPlannerHybrid"
#       tolerance: 0.5                      # tolerance for planning if unable to reach exact pose, in meters
#       downsample_costmap: false           # whether or not to downsample the map
#       downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
#       allow_unknown: true                # allow traveling in unknown space
#       max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
#       max_on_approach_iterations: 1000    # maximum number of iterations to attempt to reach goal once in tolerance
#       max_planning_time: 3.5              # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
#       motion_model_for_search: "DUBIN"    # For Hybrid Dubin, Redds-Shepp
#       cost_travel_multiplier: 2.0         # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
#       angle_quantization_bins: 64         # For Hybrid nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
#       analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
#       analytic_expansion_max_length: 4.5    # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
#       minimum_turning_radius: 0.3        # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
#       reverse_penalty: 1000.0                # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
#       change_penalty: 0.0                 # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
#       non_straight_penalty: 1.20          # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
#       cost_penalty: 2.0                   # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
#       retrospective_penalty: 0.025        # For Hybrid/Lattice nodes: penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0
#       rotation_penalty: 1000.0               # For Lattice node: Penalty to apply only to pure rotate in place commands when using minimum control sets containing rotate in place primitives. This should always be set sufficiently high to weight against this action unless strictly necessary for obstacle avoidance or there may be frequent discontinuities in the plan where it requests the robot to rotate in place to short-cut an otherwise smooth path for marginal path distance savings.
#       lookup_table_size: 20.0               # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
#       cache_obstacle_heuristic: True      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.  
#       allow_reverse_expansion: False      # For Lattice nodes: Whether to expand state lattice graph in forward primitives or reverse as well, will double the branching factor at each step.   
#       smooth_path: True                   # For Lattice/Hybrid nodes: Whether or not to smooth the path, always true for 2D nodes.
#       smoother:
#         max_iterations: 1000
#         w_smooth: 0.3
#         w_data: 0.2
#         tolerance: 1.0e-10
#         do_refinement: true               # Whether to recursively run the smoother 3 times on the results from prior runs to refine the results further

# planner_server_rclcpp_node:
#   ros__parameters:
#     use_sim_time: false

smoother_server:
  ros__parameters:
    use_sim_time: false
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-5
      max_its: 500
      do_refinement: true

smoother_server:
  ros__parameters:
    use_sim_time: false
    costmap_topic: global_costmap/costmap_raw
    footprint_topic: global_costmap/published_footprint
    robot_base_frame: base_link
    transform_timeout: 0.1
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-5
      max_its: 500
      do_refinement: true

behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_costmap_topic: global_costmap/costmap_raw
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    local_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: false
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.5
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2
robot_state_publisher:
  ros__parameters:
    use_sim_time: False #True

waypoint_follower:
  ros__parameters:
    use_sim_time: false
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: true
      waypoint_pause_duration: 200

